<?php
App::uses('AppController', 'Controller');
/**
 * Memos Controller
 *
 * @property Memo $Memo
 */
class MemosController extends AppController {

/**
 * Module name
 *
 * @var string
 */
	public $name = 'Memos';

/**
 * Use Model
 *
 * @var array
 */
	public $uses = array(
		'Memo',
		'TaskCategory',
		'User',
	);
	

/**
 * index method
 *
 * @return void
 */
	public function index() {
		$this->Memo->recursive = 0;

		$option = array();
		$searchword = array();
		$memodate_start = null;
		$memodate_end = null;

		/** eリクエストデータがある場合、ページ以外のパラメータがある場合は検索処理 */		
		if (!empty($this->data)) {
			
			if (!isset($this->request->data['clear'])) {
				$searchword = $this->request->data['Memo'];
		
				/** 顧客情報の検索処理 */
				foreach ($searchword as $search_key => $search_value) {
					
					if (isset($search_value) && $search_value != '') {

						if (strstr($search_key, '_id')) {

							$option[$search_key] = $search_value;

						} elseif ( strstr($search_key,'memodate')) {
							/*日付の検索*/
							$year = strval($search_value['year']);
							$month = strval($search_value['month']);
							$day = strval($search_value['day']);							

							if (!empty($year) && !empty($month) && !empty($day)) {
									/** 日付が存在するか確認 */
								if (checkdate($month, $day, $year)) {
									if(strstr($search_key, '_start')) {
										$memodate_start = $year.'-'.$month.'-'.$day;
									} elseif(strstr($search_key, '_end')) {
										$memodate_end = $year.'-'.$month.'-'.$day;
									}
								}
							}							

							/** 開始日と終了日を検索する */
							if ($memodate_start || $memodate_end) {
								if ($memodate_start == null) {
									$memodate_start =  date('Y')-100 .'-'. date('m') .'-'. date('d');
								}
								if ($memodate_end == null) {
									$memodate_end =  date('Y')+100 .'-'. date('m') .'-'. date('d');
								}
								$option['memo_date BETWEEN ? AND ?'] = array($memodate_start, $memodate_end);
							}
														
						} else {
						 	/**を含む場合部分一致にする */
							$option[$search_key.' LIKE'] = "%{$search_value}%";
							
						}
					}
				}//forreach終了

			
			} else {
					/** 検索内容のクリア */
					$this->redirect(array('action' => 'index'));
			}
				
		}
		

//		$this->set('memos', $this->paginate());

				/** 業務区分を取得する */
		$task_category_id = $this->TaskCategory->find('all');
		/** 11プルダウン用にデータを整える */
		$task_category_id = Set::Combine($task_category_id, '{n}.TaskCategory.id', '{n}.TaskCategory.task_category_name');

		$created_id = $this->User->find('all');
		/** 11プルダウン用にデータを整える */
		$created_id = Set::Combine($created_id, '{n}.User.id', '{n}.User.user_full_name');		

				/** Viewに値を渡す */
		$this->set('task_category_id', $task_category_id);
		$this->set('created_id', $created_id);
		$this->set('memos', $this->paginate($option));		
	}

/**
 * view method
 *
 * @param string $id
 * @return void
 */
	public function view($id = null) {
		$this->Memo->id = $id;
		if (!$this->Memo->exists()) {
			throw new NotFoundException(__('Invalid memo'));
		}
		$this->set('memo', $this->Memo->read(null, $id));

		/** 作業区分を取得する */
		$task_category_id =  $this->Memo->data['Memo']['task_category_id']; 
		$task_category_name = $this->TaskCategory->find(
			'all',
			Array(
				'conditions' => Array('id' => $task_category_id),
				'fields' => Array('TaskCategory.task_category_name')
			)
		);
		$task_category = $task_category_name[0]['TaskCategory']['task_category_name'];


		/** 作業区分を取得する */
		$created_id_value =  $this->Memo->data['Memo']['created_id']; 
		$user_full_name = $this->User->find(
			'all',
			Array(
				'conditions' => Array('id' => $created_id_value),
				'fields' => Array('User.user_full_name')
			)
		);
		$created_id_name = $user_full_name[0]['User']['user_full_name'];

		$updated_id_value =  $this->Memo->data['Memo']['updated_id']; 
		$user_full_name = $this->User->find(
			'all',
			Array(
				'conditions' => Array('id' => $updated_id_value),
				'fields' => Array('User.user_full_name')
			)
		);
		$updated_id_name = $user_full_name[0]['User']['user_full_name'];
		
		
				/** Viewに値を渡す */
		$this->set('task_category', $task_category);
		$this->set('created_id_name', $created_id_name);
		$this->set('updated_id_name', $updated_id_name);						
	}

/**
 * add method
 *
 * @return void
 */
	public function add() {
		if ($this->request->is('post')) {
			$this->Memo->create();
			if ($this->Memo->save($this->request->data)) {
				$this->Session->setFlash(__('メモの登録に成功しました。'), 'Flash/success');
				$this->redirect(array('action' => 'index'));												
			} else {
				$this->Session->setFlash(__('メモの登録に失敗しました。'));												
			}
		}

				/** 業務区分を取得する */
		$task_category_id = $this->TaskCategory->find('all');
		/** プルダウン用にデータを整える */
		$task_category_id = Set::Combine($task_category_id, '{n}.TaskCategory.id', '{n}.TaskCategory.task_category_name');

				/** Viewに値を渡す */
		$this->set('task_category_id', $task_category_id);
	}

/**
 * edit method
 *
 * @param string $id
 * @return void
 */
	public function edit($id = null) {
		$this->Memo->id = $id;
		if (!$this->Memo->exists()) {
			throw new NotFoundException(__('Invalid memo'));
		}
		if ($this->request->is('post') || $this->request->is('put')) {
			if ($this->Memo->save($this->request->data)) {
				$this->Session->setFlash(__('The memo has been saved'));
				$this->redirect(array('action' => 'index'));
			} else {
				$this->Session->setFlash(__('The memo could not be saved. Please, try again.'));
			}
		} else {
			$this->request->data = $this->Memo->read(null, $id);
		}
	}

/**
 * delete method
 *
 * @param string $id
 * @return void
 */
	public function delete($id = null) {
		if (!$this->request->is('post')) {
			throw new MethodNotAllowedException();
		}
		$this->Memo->id = $id;
		if (!$this->Memo->exists()) {
			throw new NotFoundException(__('Invalid memo'));
		}
		if ($this->Memo->delete()) {
			$this->Session->setFlash(__('Memo deleted'));
			$this->redirect(array('action' => 'index'));
		}
		$this->Session->setFlash(__('Memo was not deleted'));
		$this->redirect(array('action' => 'index'));
	}
}
